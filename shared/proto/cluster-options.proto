/*
Copyright Â© 2020 Alessandro Segala (@ItalyPaleAle)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package statiko;

option go_package = "github.com/statiko-dev/statiko/shared/proto";

// Message with the cluster options
message ClusterOptions {
  // Controller version
  string version = 1;

  // Codesign options message
  message Codesign {
    // Requires code signing
    bool require_codesign = 1;
  
    // Type of codesign key
    enum KeyType {
      // Null: there's no codesign key
      NULL = 0;
      // RSA public key
      RSA = 1;
    }
    // Key type
    KeyType type = 2;
  
    // Arguments for RSA key
    message RSAKey {
      // Modulus
      bytes n = 1;
      // Exponent
      // Note on using 32-bit integers: https://www.imperialviolet.org/2012/03/16/rsae.html
      uint32 e = 2;
    }
    // RSA key when key type is RSA
    RSAKey rsa_key = 10;
  }
  // Codesign options
  Codesign codesign = 5;

  // Manifest file name
  string manifest_file = 6;

  // Service Principal for Azure resources
  message AzureServicePrincipal {
    // Client ID
    string client_id = 1;
    // Client secret
    string client_secret = 2;
    // Tenant ID
    string tenant_id = 3;
  }

  // Options for store when using the "local" type
  message StoreLocal {
    // Path to the folder on disk
    string path = 1;
  }

  // Options for store when using the "Azure Storage" type
  message StoreAzure {
    // Storage account name
    string account = 1;
    // Container
    string container = 2;
    // Access key (alternative to SP)
    string access_key = 3;
    // Service Principal (alternative to access key)
    AzureServicePrincipal auth = 4;
    // Custom endpoint suffix (to support Azure China, Azure Germany, Azure Gov, or Azure Stack)
    string endpoint_suffix = 5;
    // Custom storage endpoint (e.g. to support Azurite) - this has priority over endpoint_suffix
    string custom_endpoint = 6;
    // Disable TLS
    bool no_tls = 7;
  }
  
  // Options for store when using the "S3" type
  message StoreS3 {
    // Access key ID
    string access_key_id = 1;
    // Secret access key
    string secret_access_key = 2;
    // Bucket name
    string bucket = 3;
    // Endpoint; default value is "s3.amazonaws.com"
    string endpoint = 4;
    // Disable TLS
    bool no_tls = 5;
  }

  // Store options
  oneof store {
    StoreLocal local = 10;
    StoreAzure azure = 11;
    StoreS3 s3 = 12;
  }

  // Configuration for Azure Key Vault
  message AzureKeyVault {
    // Name of the Key Vault
    string vault_name = 1;
    // Service Principal
    AzureServicePrincipal auth = 2;
  }
  // Azure Key Vault options
  AzureKeyVault azure_key_vault = 30;

  // Webhook notifications options
  message NotificationsWebhook {
    string url = 1;
    string payload_key = 2;
  }

  // Configuration for notifications
  message NotificationsOpts {
    oneof opts {
      NotificationsWebhook webhook = 1;
    }
  }
  // Notification methods
  repeated NotificationsOpts notifications = 40;
}
