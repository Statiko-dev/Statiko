//
//Copyright Â© 2020 Alessandro Segala (@ItalyPaleAle)
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published
//by the Free Software Foundation, version 3 of the License.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: controller-service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Types of messages
type ChannelClientStream_MessageType int32

const (
	// Null value (should not be used)
	ChannelClientStream_NULL ChannelClientStream_MessageType = 0
	// Node registration
	ChannelClientStream_REGISTER_NODE ChannelClientStream_MessageType = 10
	// Health message (response to health pings)
	ChannelClientStream_HEALTH_MESSAGE ChannelClientStream_MessageType = 20
)

// Enum value maps for ChannelClientStream_MessageType.
var (
	ChannelClientStream_MessageType_name = map[int32]string{
		0:  "NULL",
		10: "REGISTER_NODE",
		20: "HEALTH_MESSAGE",
	}
	ChannelClientStream_MessageType_value = map[string]int32{
		"NULL":           0,
		"REGISTER_NODE":  10,
		"HEALTH_MESSAGE": 20,
	}
)

func (x ChannelClientStream_MessageType) Enum() *ChannelClientStream_MessageType {
	p := new(ChannelClientStream_MessageType)
	*p = x
	return p
}

func (x ChannelClientStream_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelClientStream_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_service_proto_enumTypes[0].Descriptor()
}

func (ChannelClientStream_MessageType) Type() protoreflect.EnumType {
	return &file_controller_service_proto_enumTypes[0]
}

func (x ChannelClientStream_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelClientStream_MessageType.Descriptor instead.
func (ChannelClientStream_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{0, 0}
}

// Types of messages
type ChannelServerStream_MessageType int32

const (
	// Null value (should not be used)
	ChannelServerStream_NULL ChannelServerStream_MessageType = 0
	// OK message (acknowledgement)
	ChannelServerStream_OK ChannelServerStream_MessageType = 1
	// Error message
	ChannelServerStream_ERROR ChannelServerStream_MessageType = 2
	// New state notification
	ChannelServerStream_STATE_MESSAGE ChannelServerStream_MessageType = 10
	// Health ping (requests node health)
	ChannelServerStream_HEALTH_PING ChannelServerStream_MessageType = 20
)

// Enum value maps for ChannelServerStream_MessageType.
var (
	ChannelServerStream_MessageType_name = map[int32]string{
		0:  "NULL",
		1:  "OK",
		2:  "ERROR",
		10: "STATE_MESSAGE",
		20: "HEALTH_PING",
	}
	ChannelServerStream_MessageType_value = map[string]int32{
		"NULL":          0,
		"OK":            1,
		"ERROR":         2,
		"STATE_MESSAGE": 10,
		"HEALTH_PING":   20,
	}
)

func (x ChannelServerStream_MessageType) Enum() *ChannelServerStream_MessageType {
	p := new(ChannelServerStream_MessageType)
	*p = x
	return p
}

func (x ChannelServerStream_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelServerStream_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_service_proto_enumTypes[1].Descriptor()
}

func (ChannelServerStream_MessageType) Type() protoreflect.EnumType {
	return &file_controller_service_proto_enumTypes[1]
}

func (x ChannelServerStream_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelServerStream_MessageType.Descriptor instead.
func (ChannelServerStream_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{1, 0}
}

// Client stream for the Channel RPC
type ChannelClientStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message type
	Type ChannelClientStream_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=statiko.ChannelClientStream_MessageType" json:"type,omitempty"`
	// Register node message, for messages of type REGISTER_NODE
	Registration *ChannelClientStream_RegisterNode `protobuf:"bytes,10,opt,name=registration,proto3" json:"registration,omitempty"`
	// Health message, for messages of type HEALTH_MESSAGE
	Health *NodeHealth `protobuf:"bytes,20,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *ChannelClientStream) Reset() {
	*x = ChannelClientStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelClientStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelClientStream) ProtoMessage() {}

func (x *ChannelClientStream) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelClientStream.ProtoReflect.Descriptor instead.
func (*ChannelClientStream) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelClientStream) GetType() ChannelClientStream_MessageType {
	if x != nil {
		return x.Type
	}
	return ChannelClientStream_NULL
}

func (x *ChannelClientStream) GetRegistration() *ChannelClientStream_RegisterNode {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *ChannelClientStream) GetHealth() *NodeHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

// Server stream for the Channel RPC
type ChannelServerStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message type
	Type ChannelServerStream_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=statiko.ChannelServerStream_MessageType" json:"type,omitempty"`
	// Error message, for messages of type ERROR
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// New state object, for messages of type STATE_MESSAGE
	State *StateMessage `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ChannelServerStream) Reset() {
	*x = ChannelServerStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelServerStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelServerStream) ProtoMessage() {}

func (x *ChannelServerStream) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelServerStream.ProtoReflect.Descriptor instead.
func (*ChannelServerStream) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelServerStream) GetType() ChannelServerStream_MessageType {
	if x != nil {
		return x.Type
	}
	return ChannelServerStream_NULL
}

func (x *ChannelServerStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ChannelServerStream) GetState() *StateMessage {
	if x != nil {
		return x.State
	}
	return nil
}

// Argument for the GetState RPC
// This is currently an empty message
type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{2}
}

// Message for requesting a TLS certificate
type TLSCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the TLS certificate to request
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
}

func (x *TLSCertificateRequest) Reset() {
	*x = TLSCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificateRequest) ProtoMessage() {}

func (x *TLSCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificateRequest.ProtoReflect.Descriptor instead.
func (*TLSCertificateRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{3}
}

func (x *TLSCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

// Message for requesting the cluster options
// This is currently an empty message
type ClusterOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterOptionsRequest) Reset() {
	*x = ClusterOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOptionsRequest) ProtoMessage() {}

func (x *ClusterOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOptionsRequest.ProtoReflect.Descriptor instead.
func (*ClusterOptionsRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{4}
}

// Message for requesting the ACME challenge response
type ACMEChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *ACMEChallengeRequest) Reset() {
	*x = ACMEChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACMEChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACMEChallengeRequest) ProtoMessage() {}

func (x *ACMEChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACMEChallengeRequest.ProtoReflect.Descriptor instead.
func (*ACMEChallengeRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{5}
}

func (x *ACMEChallengeRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ACMEChallengeRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Message with the ACME challenge response
type ACMEChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ACMEChallengeResponse) Reset() {
	*x = ACMEChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACMEChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACMEChallengeResponse) ProtoMessage() {}

func (x *ACMEChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACMEChallengeResponse.ProtoReflect.Descriptor instead.
func (*ACMEChallengeResponse) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{6}
}

func (x *ACMEChallengeResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Message for requesting a file
type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{7}
}

func (x *FileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Stream containing a chunked file
type FileStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chunk of data
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *FileStream) Reset() {
	*x = FileStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStream) ProtoMessage() {}

func (x *FileStream) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStream.ProtoReflect.Descriptor instead.
func (*FileStream) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{8}
}

func (x *FileStream) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Register node message type
type ChannelClientStream_RegisterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node name
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *ChannelClientStream_RegisterNode) Reset() {
	*x = ChannelClientStream_RegisterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelClientStream_RegisterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelClientStream_RegisterNode) ProtoMessage() {}

func (x *ChannelClientStream_RegisterNode) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelClientStream_RegisterNode.ProtoReflect.Descriptor instead.
func (*ChannelClientStream_RegisterNode) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ChannelClientStream_RegisterNode) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

var File_controller_service_proto protoreflect.FileDescriptor

var file_controller_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6b, 0x6f, 0x1a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x6c, 0x73,
	0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x2b, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x14, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x22, 0x11, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3e, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x41, 0x43, 0x4d,
	0x45, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x33, 0x0a, 0x15, 0x41, 0x43, 0x4d, 0x45, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0xca, 0x03, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b,
	0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b,
	0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4d, 0x45,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x41, 0x43, 0x4d, 0x45,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2d, 0x64,
	0x65, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_service_proto_rawDescOnce sync.Once
	file_controller_service_proto_rawDescData = file_controller_service_proto_rawDesc
)

func file_controller_service_proto_rawDescGZIP() []byte {
	file_controller_service_proto_rawDescOnce.Do(func() {
		file_controller_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_service_proto_rawDescData)
	})
	return file_controller_service_proto_rawDescData
}

var file_controller_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_controller_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_controller_service_proto_goTypes = []interface{}{
	(ChannelClientStream_MessageType)(0),     // 0: statiko.ChannelClientStream.MessageType
	(ChannelServerStream_MessageType)(0),     // 1: statiko.ChannelServerStream.MessageType
	(*ChannelClientStream)(nil),              // 2: statiko.ChannelClientStream
	(*ChannelServerStream)(nil),              // 3: statiko.ChannelServerStream
	(*GetStateRequest)(nil),                  // 4: statiko.GetStateRequest
	(*TLSCertificateRequest)(nil),            // 5: statiko.TLSCertificateRequest
	(*ClusterOptionsRequest)(nil),            // 6: statiko.ClusterOptionsRequest
	(*ACMEChallengeRequest)(nil),             // 7: statiko.ACMEChallengeRequest
	(*ACMEChallengeResponse)(nil),            // 8: statiko.ACMEChallengeResponse
	(*FileRequest)(nil),                      // 9: statiko.FileRequest
	(*FileStream)(nil),                       // 10: statiko.FileStream
	(*ChannelClientStream_RegisterNode)(nil), // 11: statiko.ChannelClientStream.RegisterNode
	(*NodeHealth)(nil),                       // 12: statiko.NodeHealth
	(*StateMessage)(nil),                     // 13: statiko.StateMessage
	(*TLSCertificateMessage)(nil),            // 14: statiko.TLSCertificateMessage
	(*ClusterOptions)(nil),                   // 15: statiko.ClusterOptions
}
var file_controller_service_proto_depIdxs = []int32{
	0,  // 0: statiko.ChannelClientStream.type:type_name -> statiko.ChannelClientStream.MessageType
	11, // 1: statiko.ChannelClientStream.registration:type_name -> statiko.ChannelClientStream.RegisterNode
	12, // 2: statiko.ChannelClientStream.health:type_name -> statiko.NodeHealth
	1,  // 3: statiko.ChannelServerStream.type:type_name -> statiko.ChannelServerStream.MessageType
	13, // 4: statiko.ChannelServerStream.state:type_name -> statiko.StateMessage
	2,  // 5: statiko.Controller.Channel:input_type -> statiko.ChannelClientStream
	4,  // 6: statiko.Controller.GetState:input_type -> statiko.GetStateRequest
	5,  // 7: statiko.Controller.GetTLSCertificate:input_type -> statiko.TLSCertificateRequest
	6,  // 8: statiko.Controller.GetClusterOptions:input_type -> statiko.ClusterOptionsRequest
	7,  // 9: statiko.Controller.GetACMEChallengeResponse:input_type -> statiko.ACMEChallengeRequest
	9,  // 10: statiko.Controller.GetFile:input_type -> statiko.FileRequest
	3,  // 11: statiko.Controller.Channel:output_type -> statiko.ChannelServerStream
	13, // 12: statiko.Controller.GetState:output_type -> statiko.StateMessage
	14, // 13: statiko.Controller.GetTLSCertificate:output_type -> statiko.TLSCertificateMessage
	15, // 14: statiko.Controller.GetClusterOptions:output_type -> statiko.ClusterOptions
	8,  // 15: statiko.Controller.GetACMEChallengeResponse:output_type -> statiko.ACMEChallengeResponse
	10, // 16: statiko.Controller.GetFile:output_type -> statiko.FileStream
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_controller_service_proto_init() }
func file_controller_service_proto_init() {
	if File_controller_service_proto != nil {
		return
	}
	file_node_health_proto_init()
	file_state_message_proto_init()
	file_tls_message_proto_init()
	file_cluster_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelClientStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelServerStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACMEChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACMEChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelClientStream_RegisterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_service_proto_goTypes,
		DependencyIndexes: file_controller_service_proto_depIdxs,
		EnumInfos:         file_controller_service_proto_enumTypes,
		MessageInfos:      file_controller_service_proto_msgTypes,
	}.Build()
	File_controller_service_proto = out.File
	file_controller_service_proto_rawDesc = nil
	file_controller_service_proto_goTypes = nil
	file_controller_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	// Bi-directional stream that is used for:
	// 1. Registering a node
	// 2. Allowing the server to request the health of a node
	// 3. Notify nodes of state updates
	Channel(ctx context.Context, opts ...grpc.CallOption) (Controller_ChannelClient, error)
	// Requests the desired state
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateMessage, error)
	// Requests a TLS certificate
	GetTLSCertificate(ctx context.Context, in *TLSCertificateRequest, opts ...grpc.CallOption) (*TLSCertificateMessage, error)
	// Requests the options for the cluster
	GetClusterOptions(ctx context.Context, in *ClusterOptionsRequest, opts ...grpc.CallOption) (*ClusterOptions, error)
	// Requests the ACME challenge response
	GetACMEChallengeResponse(ctx context.Context, in *ACMEChallengeRequest, opts ...grpc.CallOption) (*ACMEChallengeResponse, error)
	// Requests a file from the storage
	// This is used by agents needing files that are stored in the controller's local disk
	GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Controller_GetFileClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Channel(ctx context.Context, opts ...grpc.CallOption) (Controller_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/statiko.Controller/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerChannelClient{stream}
	return x, nil
}

type Controller_ChannelClient interface {
	Send(*ChannelClientStream) error
	Recv() (*ChannelServerStream, error)
	grpc.ClientStream
}

type controllerChannelClient struct {
	grpc.ClientStream
}

func (x *controllerChannelClient) Send(m *ChannelClientStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerChannelClient) Recv() (*ChannelServerStream, error) {
	m := new(ChannelServerStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateMessage, error) {
	out := new(StateMessage)
	err := c.cc.Invoke(ctx, "/statiko.Controller/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetTLSCertificate(ctx context.Context, in *TLSCertificateRequest, opts ...grpc.CallOption) (*TLSCertificateMessage, error) {
	out := new(TLSCertificateMessage)
	err := c.cc.Invoke(ctx, "/statiko.Controller/GetTLSCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetClusterOptions(ctx context.Context, in *ClusterOptionsRequest, opts ...grpc.CallOption) (*ClusterOptions, error) {
	out := new(ClusterOptions)
	err := c.cc.Invoke(ctx, "/statiko.Controller/GetClusterOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetACMEChallengeResponse(ctx context.Context, in *ACMEChallengeRequest, opts ...grpc.CallOption) (*ACMEChallengeResponse, error) {
	out := new(ACMEChallengeResponse)
	err := c.cc.Invoke(ctx, "/statiko.Controller/GetACMEChallengeResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Controller_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[1], "/statiko.Controller/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetFileClient interface {
	Recv() (*FileStream, error)
	grpc.ClientStream
}

type controllerGetFileClient struct {
	grpc.ClientStream
}

func (x *controllerGetFileClient) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	// Bi-directional stream that is used for:
	// 1. Registering a node
	// 2. Allowing the server to request the health of a node
	// 3. Notify nodes of state updates
	Channel(Controller_ChannelServer) error
	// Requests the desired state
	GetState(context.Context, *GetStateRequest) (*StateMessage, error)
	// Requests a TLS certificate
	GetTLSCertificate(context.Context, *TLSCertificateRequest) (*TLSCertificateMessage, error)
	// Requests the options for the cluster
	GetClusterOptions(context.Context, *ClusterOptionsRequest) (*ClusterOptions, error)
	// Requests the ACME challenge response
	GetACMEChallengeResponse(context.Context, *ACMEChallengeRequest) (*ACMEChallengeResponse, error)
	// Requests a file from the storage
	// This is used by agents needing files that are stored in the controller's local disk
	GetFile(*FileRequest, Controller_GetFileServer) error
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) Channel(Controller_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (*UnimplementedControllerServer) GetState(context.Context, *GetStateRequest) (*StateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedControllerServer) GetTLSCertificate(context.Context, *TLSCertificateRequest) (*TLSCertificateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTLSCertificate not implemented")
}
func (*UnimplementedControllerServer) GetClusterOptions(context.Context, *ClusterOptionsRequest) (*ClusterOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterOptions not implemented")
}
func (*UnimplementedControllerServer) GetACMEChallengeResponse(context.Context, *ACMEChallengeRequest) (*ACMEChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetACMEChallengeResponse not implemented")
}
func (*UnimplementedControllerServer) GetFile(*FileRequest, Controller_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).Channel(&controllerChannelServer{stream})
}

type Controller_ChannelServer interface {
	Send(*ChannelServerStream) error
	Recv() (*ChannelClientStream, error)
	grpc.ServerStream
}

type controllerChannelServer struct {
	grpc.ServerStream
}

func (x *controllerChannelServer) Send(m *ChannelServerStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerChannelServer) Recv() (*ChannelClientStream, error) {
	m := new(ChannelClientStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Controller_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statiko.Controller/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetTLSCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetTLSCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statiko.Controller/GetTLSCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetTLSCertificate(ctx, req.(*TLSCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetClusterOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetClusterOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statiko.Controller/GetClusterOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetClusterOptions(ctx, req.(*ClusterOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetACMEChallengeResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACMEChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetACMEChallengeResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statiko.Controller/GetACMEChallengeResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetACMEChallengeResponse(ctx, req.(*ACMEChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetFile(m, &controllerGetFileServer{stream})
}

type Controller_GetFileServer interface {
	Send(*FileStream) error
	grpc.ServerStream
}

type controllerGetFileServer struct {
	grpc.ServerStream
}

func (x *controllerGetFileServer) Send(m *FileStream) error {
	return x.ServerStream.SendMsg(m)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statiko.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Controller_GetState_Handler,
		},
		{
			MethodName: "GetTLSCertificate",
			Handler:    _Controller_GetTLSCertificate_Handler,
		},
		{
			MethodName: "GetClusterOptions",
			Handler:    _Controller_GetClusterOptions_Handler,
		},
		{
			MethodName: "GetACMEChallengeResponse",
			Handler:    _Controller_GetACMEChallengeResponse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _Controller_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _Controller_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller-service.proto",
}
