/*
Copyright Â© 2020 Alessandro Segala (@ItalyPaleAle)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package statiko;

option go_package = "github.com/statiko-dev/statiko/shared/proto";

import "node-health.proto";
import "state-message.proto";
import "tls-message.proto";
import "cluster-options.proto";

// Service that manages the state for the cluster and performs all background tasks
service Controller {
  // Bi-directional stream that is used for:
  // 1. Registering a node
  // 2. Allowing the server to request the health of a node
  // 3. Notify nodes of state updates
  rpc Channel(stream ChannelClientStream) returns (stream ChannelServerStream);

  // Requests the desired state
  rpc GetState(GetStateRequest) returns (StateMessage);

  // Requests a TLS certificate
  rpc GetTLSCertificate(TLSCertificateRequest) returns (TLSCertificateMessage);

  // Requests the options for the cluster
  rpc GetClusterOptions(ClusterOptionsRequest) returns (ClusterOptions);

  // Requests the ACME challenge response
  rpc GetACMEChallengeResponse(ACMEChallengeRequest) returns (ACMEChallengeResponse);

  // Requests a file from the storage
  // This is used by agents needing files that are stored in the controller's local disk
  rpc GetFile(FileRequest) returns (stream FileStream);
}

// Client stream for the Channel RPC
message ChannelClientStream {
  // Types of messages
  enum MessageType {
    // Null value (should not be used)
    NULL = 0;
    // Node registration
    REGISTER_NODE = 10;
    // Health message (response to health pings)
    HEALTH_MESSAGE = 20;
  }
  // Message type
  MessageType type = 1;

  // Register node message type
  message RegisterNode {
    // Node name
    string node_name = 1;
  }
  // Register node message, for messages of type REGISTER_NODE
  RegisterNode registration = 10;

  // Health message, for messages of type HEALTH_MESSAGE
  NodeHealth health = 20;
}

// Server stream for the Channel RPC
message ChannelServerStream {
  // Types of messages
  enum MessageType {
    // Null value (should not be used)
    NULL = 0;
    // OK message (acknowledgement)
    OK = 1;
    // Error message
    ERROR = 2;
    // New state notification
    STATE_MESSAGE = 10;
    // Health ping (requests node health)
    HEALTH_PING = 20;
  }
  // Message type
  MessageType type = 1;

  // Error message, for messages of type ERROR
  string error = 2;

  // New state object, for messages of type STATE_MESSAGE
  StateMessage state = 10;
}

// Argument for the GetState RPC
// This is currently an empty message
message GetStateRequest {}

// Message for requesting a TLS certificate
message TLSCertificateRequest {
  // ID of the TLS certificate to request
  string certificate_id = 1;
}

// Message for requesting the cluster options
// This is currently an empty message
message ClusterOptionsRequest {}

// Message for requesting the ACME challenge response
message ACMEChallengeRequest {
  string token = 1;
  string domain = 2;
}

// Message with the ACME challenge response
message ACMEChallengeResponse {
  string response = 1;
}

// Message for requesting a file
message FileRequest {
  string name = 1;
}

// Stream containing a chunked file
message FileStream {
  // Chunk of data
  bytes chunk = 1;
}
