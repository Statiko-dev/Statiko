# TLS-enabled website
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Listen on the domain
    server_name {{.Item.Domain}};

    # Configure logging
    access_log off;
    error_log {{.AppRoot}}sites/{{.Item.Domain}}/nginx-error.log error;

    # TLS
    ssl_certificate {{.AppRoot}}sites/{{.Item.Domain}}/tls/certificate.pem;
    ssl_certificate_key {{.AppRoot}}sites/{{.Item.Domain}}/tls/key.pem;
    ssl_dhparam {{.Dhparams}};

    # Webroot
    root {{.AppRoot}}sites/{{.Item.Domain}}/www;
    index index.html index.htm;

    # Error pages
    {{if not (eq .Manifest.Page404 "")}}
        error_page 404 /{{.Manifest.Page404}};
    {{- end}}
    location / {
        {{if and .Manifest.Locations (index .Manifest.Locations "/") }}
            {{with index .Manifest.Locations "/"}}
                {{if not .Proxy}}
                    try_files $uri $uri/ =404;
                {{end}}
                {{template "locationblock" .}}
            {{end}}
        {{else}}
            try_files $uri $uri/ =404;
        {{end}}
    }
    {{if not (eq .Manifest.Page403 "")}}
        error_page 403 /{{.Manifest.Page403}};
    {{- end}}

    # Rules for specific locations/files
    {{range $k, $v := .Manifest.Locations}}
        {{if not (eq $k "/")}}
            location {{$k}} {
                {{template "locationblock" $v}}
            }
        {{- end}}
    {{- end}}

    # Block access to the manifest file
    location = /{{.ManifestFile}} {
        return 404;
    }

    # ACME challenges are proxied to the API server
    location ~ ^/\.well-known\/acme\-challenge {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_ssl_verify off;
        proxy_pass http://localhost:{{.Port}};
    }

    # Rewrites
    {{range $k, $v := .Manifest.Rewrite}}
        rewrite {{$k}} {{$v}} last;
    {{- end}}
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;

    # Listen on the domain and on the aliases if any
    server_name {{.Item.Domain}} {{if .Item.Aliases}}{{joinList .Item.Aliases " "}}{{end}};

    # Configure logging
    access_log off;
    error_log {{.AppRoot}}sites/{{.Item.Domain}}/nginx-error.log error;

    # Redirect to the HTTPS website
    return 301 https://{{.Item.Domain}}$request_uri;
}

{{if .Item.Aliases}}
# Redirect aliases (on HTTPS) to the canonical host
server {
    listen [::]:443 ssl http2;
    listen 443 ssl http2;

    # Listen on the wrong hosts
    server_name {{joinList .Item.Aliases " "}};

    # Configure logging
    access_log off;
    error_log {{.AppRoot}}sites/{{.Item.Domain}}/nginx-error.log error;

    # TLS
    ssl_certificate {{.AppRoot}}sites/{{.Item.Domain}}/tls/certificate.pem;
    ssl_certificate_key {{.AppRoot}}sites/{{.Item.Domain}}/tls/key.pem;
    ssl_dhparam {{.Dhparams}};

    # Redirect to the canonical host
    return 301 https://{{.Item.Domain}}$request_uri;
}
{{- end}}

{{define "locationblock"}}
    {{if and (not (eq .ClientCaching "")) (not (eq .ClientCaching "0"))}}
        expires "{{.ClientCaching}}";
        add_header Pragma public;
        add_header Cache-Control "public";
    {{- end}}
    {{range $hk, $hv := .CleanHeaders}}
        add_header "{{$hk}}" "{{$hv}}";
    {{- end}}
    {{if .Proxy}}
        proxy_pass {{.Proxy}};
    {{- end}}
    {{if .Deny}}
        return 404;
    {{- end}}
{{end}}
