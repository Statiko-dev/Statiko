# This pipeline runs the release task every time a new tag is pushed that starts with v*
# It creates a release on GitHub
# It then builds binanries for all architectures (amd64, armhf, arm64) and adds them to the release
# Lastly, it builds Docker images for all architectures and publishes them on Docker Hub

# Required secrets:
# - DOCKER_PASSWORD password for Docker Hub

name: Release Statiko

on:
  push:
    tags:
      # Push to tags matching v*
      - 'v*'

env:
  GO_VERSION: '1.15'
  NODE_BUILDER_IMAGE: 'node:14-alpine'
  DOCKER_USERNAME: 'italypaleale'
  DOCKER_REPO_AGENT: 'docker.io/statiko/statiko-agent'
  DOCKER_REPO_CONTROLLER: 'docker.io/statiko/statiko-controller'
  
jobs:

  release:
    name: Release
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^${{env.GO_VERSION}}

      # Setup qemu for Docker buildx
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64,arm

      # Setup Docker buildx
      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      
      # Login to Docker Hub
      - name: Login to Docker Hub
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{env.DOCKER_USERNAME}}" --password-stdin
      
      # Set variables
      - name: Set variables
        run: |
          # Fetch semver: https://github.com/fsaintjacques/semver-tool
          curl https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.0.0/src/semver > semver
          chmod +x semver
          # Trim the first 10 characters, which are "refs/tags/"
          BUILD_ID="${GITHUB_REF:10}"
          # Just like BUILD_ID, but without the "v" at the beginning
          BUILD_VERSION="${GITHUB_REF:11}"
          BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
          COMMIT_HASH=$(echo $GITHUB_SHA | head -c 7)
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

          # Branch
          MAJOR_VERSION=$(./semver get major $BUILD_VERSION)
          MINOR_VERSION=$(./semver get minor $BUILD_VERSION)
          PRERELEASE=$(./semver get prerel $BUILD_VERSION)
          BRANCH=""
          if [ "$MAJOR_VERSION" = "0" ]; then
            BRANCH="$MAJOR_VERSION.$MINOR_VERSION"
          else
            BRANCH="$MAJOR_VERSION"
          fi
          if [ "$PRERELEASE" != "" ]; then
            BRANCH="${BRANCH}-pre"
          fi
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

      # Build default web app
      - name: Build default web app
        run: |
          # Build using Docker
          docker run \
            --rm \
            -v "$PWD"/default-app:/usr/src/myapp \
            -w /usr/src/myapp \
            ${{env.NODE_BUILDER_IMAGE}} \
              sh -c '
                set -e

                echo -e "###\nInstalling npm dependencies\n"
                npm ci

                echo -e "\n###\nBuilding default web app\n"
                ./build.sh
                '
          echo -e "\n###\nCompilation done\n"
          ls -al default-app/dist

      # Fetch tools
      - name: Fetch tools
        run: |
          # Install core tools
          make get-tools

      # Get Go modules
      - name: Get Go modules
        run: |
          make fetch-deps

      # Run pkger
      - name: Run pkger
        run: |
          make pkger

      # Build app for all archs
      - name: Build app for all archs
        run: |
          echo -e "\n###\nBuilding binaries for all archs\n"
          make build-all-archs

          echo -e "\n###\nCopy readme and license\n"
          for f in .bin/*; do
            if [ -d "$f" ]; then
              cp -v LICENSE README.md "$f/"
            fi
          done

          echo -e "\n###\nMake all binaries executable\n"
          chmod +x .bin/*/agent .bin/*/controller

          echo -e "\n###\nCreate archives\n"
          for f in .bin/*; do
            if [ -d "$f" ]; then
              VARIANT=$(basename "$f")
              (cd .bin && tar -cvzf statiko_${VARIANT}.tar.gz $VARIANT)
            fi
          done

          echo -e "\n###\nCompilation done\n"
          ls -al .bin .bin/*

      # Publish artifacts
      - name: Publish binaries as artifacts
        uses: actions/upload-artifact@v1
        with:
          name: bin
          path: .bin
      
      # Build Docker images
      - name: Build and push Docker multi-arch images
        run: |
          # Create symbolic links
          ( \
            cd .bin && \
            ln -s linux-arm linux-armhf \
          )
          ls -al .bin

          # Build and push Docker multi-arch images
          docker buildx build \
            -t ${{env.DOCKER_REPO_AGENT}}:${{env.BUILD_VERSION}} \
            --push \
            --platform linux/amd64,linux/arm64,linux/arm \
            --build-arg BUILD_ID=${{env.BUILD_ID}} \
            --build-arg BUILD_TIME=${{env.BUILD_TIME}} \
            --build-arg COMMIT_HASH=${{env.COMMIT_HASH}} \
            -f container/agent/Dockerfile \
            .
          docker buildx build \
            -t ${{env.DOCKER_REPO_CONTROLLER}}:${{env.BUILD_VERSION}} \
            --push \
            --platform linux/amd64,linux/arm64,linux/arm \
            --build-arg BUILD_ID=${{env.BUILD_ID}} \
            --build-arg BUILD_TIME=${{env.BUILD_TIME}} \
            --build-arg COMMIT_HASH=${{env.COMMIT_HASH}} \
            -f container/agent/Dockerfile \
            .

          # Repeat to add the $BRANCH tag (images are cached so they're not re-built)
          # Do this only if this is not a pre-release
          docker buildx build \
            -t ${{env.DOCKER_REPO_AGENT}}:${{env.BRANCH}} \
            --push \
            --platform linux/amd64,linux/arm64,linux/arm \
            --build-arg BUILD_ID=${{env.BUILD_ID}} \
            --build-arg BUILD_TIME=${{env.BUILD_TIME}} \
            --build-arg COMMIT_HASH=${{env.COMMIT_HASH}} \
            -f container/agent/Dockerfile \
            .
          docker buildx build \
            -t ${{env.DOCKER_REPO_CONTROLLER}}:${{env.BRANCH}} \
            --push \
            --platform linux/amd64,linux/arm64,linux/arm \
            --build-arg BUILD_ID=${{env.BUILD_ID}} \
            --build-arg BUILD_TIME=${{env.BUILD_TIME}} \
            --build-arg COMMIT_HASH=${{env.COMMIT_HASH}} \
            -f container/agent/Dockerfile \
            .

      # Create release and upload assets
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: ${{ env.PRERELEASE != '' }}

      - name: Upload release asset amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .bin/statiko_linux-amd64.tar.gz
          asset_name: statiko_linux-amd64.tar.gz
          asset_content_type: application/tar+gzip

      - name: Upload release asset arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .bin/statiko_linux-arm64.tar.gz
          asset_name: statiko_linux-arm64.tar.gz
          asset_content_type: application/tar+gzip

      - name: Upload release asset armhf
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .bin/statiko_linux-armhf.tar.gz
          asset_name: statiko_linux-armhf.tar.gz
          asset_content_type: application/tar+gzip

