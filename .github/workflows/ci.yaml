# This pipeline runs the Continuous Integration tasks
# Builds statiko for amd64 only, creates the Docker container and the test container, and runs the unit tests

# Required secrets:
# - DOCKER_PASSWORD password for Docker Hub
# - STATIKO_AZURE_KEY_VAULT_AUTH_CLIENT_SECRET secret for the Azure Service principal with permission to access Azure Key Vault

name: Continuous Integration

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

env:
  GO_VERSION: '1.15'
  NODE_BUILDER_IMAGE: 'node:14-alpine'
  DOCKER_USERNAME: 'italypaleale'
  DOCKER_REPO_AGENT: 'docker.io/statiko/statiko-agent'
  DOCKER_REPO_CONTROLLER: 'docker.io/statiko/statiko-controller'
  STATIKO_REPO_AZURE_ACCOUNT: 'devstoreaccount1'
  STATIKO_REPO_AZURE_ACCESS_KEY: 'Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=='
  STATIKO_REPO_AZURE_CUSTOM_ENDPOINT: 'localhost:10000'
  STATIKO_REPO_AZURE_NO_TLS: '1'
  STATIKO_REPO_S3_ACCESS_KEY_ID: 'AKIAIOSFODNN7EXAMPLE'
  STATIKO_REPO_S3_SECRET_ACCESS_KEY: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
  STATIKO_REPO_S3_ENDPOINT: 'localhost:9000'
  STATIKO_REPO_S3_NO_TLS: '1'
  # Needed for when testing against S3 (rather than minio): location where the bucket is created
  #TESTING_S3_REGION: 'us-east-1'
  
jobs:

  ci:
    name: Continuous Integration
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^${{env.GO_VERSION}}

      # Set variables
      - name: Set variables
        run: |
          BUILD_ID="canary"
          BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
          COMMIT_HASH=$(echo $GITHUB_SHA | head -c 7)
          TAG="ci-$(date -u +'%Y%m%d%H%M%S')"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      # Start minio
      # Can't use a GitHub Action service because that doesn't allow overriding the container's command
      - name: Start minio
        run: |
          docker run \
            -d \
            -p 9000:9000 \
            -e "MINIO_ACCESS_KEY=${{env.STATIKO_REPO_S3_ACCESS_KEY_ID}}" \
            -e "MINIO_SECRET_KEY=${{env.STATIKO_REPO_S3_SECRET_ACCESS_KEY}}" \
            minio/minio \
              server /data

      # Start Azurite
      - name: Start Azurite
        run: |
          docker run \
            -d \
            -p 10000:10000 \
            mcr.microsoft.com/azure-storage/azurite \
              azurite-blob --blobHost 0.0.0.0 --blobPort 10000

      # Build default web app
      - name: Build default web app
        run: |
          # Build using Docker
          docker run \
            --rm \
            -v "$PWD"/default-app:/usr/src/myapp \
            -w /usr/src/myapp \
            ${{env.NODE_BUILDER_IMAGE}} \
              sh -c '
                set -e

                echo -e "###\nInstalling npm dependencies\n"
                npm ci

                echo -e "\n###\nBuilding default web app\n"
                ./build.sh
                '
          echo -e "\n###\nCompilation done\n"
          ls -al default-app/dist

      # Fetch tools
      - name: Fetch tools
        run: |
          # Install core tools
          make get-tools

          # Install goveralls and go-acc
          curl -sf https://gobinaries.com/github.com/mattn/goveralls@v0.0.6 | PREFIX=. sh
          curl -sf https://gobinaries.com/github.com/ory/go-acc@v0.2.6 | PREFIX=. sh

      # Get Go modules
      - name: Get Go modules
        run: |
          make fetch-deps

      # Run pkger
      - name: Run pkger
        run: |
          make pkger

      # Run tests
      - name: Run tests
        run: |
          # Set up the environment
          sudo ln -s /etc/statiko tests/etc/statiko
          sudo mkdir -p /repo /data
          sudo chmod 0777 /repo /data
          mkdir -p tests/results
          # Run tests
          make test
        env:
          STATIKO_AZURE_KEY_VAULT_AUTH_CLIENT_SECRET: ${{ secrets.STATIKO_AZURE_KEY_VAULT_AUTH_CLIENT_SECRET }}

      # Build app for amd64 only
      - name: Build app for amd64 only
        run: |
          make build-amd64
          chmod +x .bin/*/agent .bin/*/controller
          ls -al .bin .bin/*

      # Build agent Docker image
      - name: Build agent Docker image
        run: |
          # Use the "latest" tag here
          docker build \
            --tag "${{env.DOCKER_REPO_AGENT}}:latest" \
            --build-arg TARGETARCH=amd64 \
            --build-arg BUILD_ID=${{env.BUILD_ID}} \
            --build-arg BUILD_TIME=${{env.BUILD_TIME}} \
            --build-arg COMMIT_HASH=${{env.COMMIT_HASH}} \
            -f container/agent/Dockerfile \
            .

      # Build controller Docker image
      - name: Build controller Docker image
        run: |
          # Use the "latest" tag here
          docker build \
            --tag "${{env.DOCKER_REPO_CONTROLLER}}:latest" \
            --build-arg TARGETARCH=amd64 \
            --build-arg BUILD_ID=${{env.BUILD_ID}} \
            --build-arg BUILD_TIME=${{env.BUILD_TIME}} \
            --build-arg COMMIT_HASH=${{env.COMMIT_HASH}} \
            -f container/controller/Dockerfile \
            .

      # Coverage report
      - name: Convert coverage report
        run: |
          echo -e "###\nFetching utilities\n"
          curl -sf https://gobinaries.com/github.com/axw/gocov/gocov | PREFIX=.bin/ sh
          # Fork of github.com/matm/gocov-html but with tags so it works with gobinaries.com
          curl -sf https://gobinaries.com/github.com/ItalyPaleAle/gocov-html | PREFIX=.bin/ sh 
          #go get github.com/AlekSi/gocov-xml

          echo -e "###\nConverting coverage reports\n"
          .bin/gocov convert tests/results/coverage.txt | .bin/gocov-html > tests/results/coverage.html
          #.bin/gocov convert tests/results/coverage.txt | .bin/gocov-xml > tests/results/coverage.xml

      # Publish test results and coverage
      - name: Publish results and coverage
        # This step always runs, even if the tests failed
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: tests
          path: tests/results

      # Publish artifacts
      - name: Publish binaries as artifacts
        uses: actions/upload-artifact@v1
        with:
          name: bin
          path: .bin

      # Login to Docker Hub
      - name: Login to Docker Hub
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{env.DOCKER_USERNAME}}" --password-stdin

      # Publish Docker image
      - name: Publish Docker CI image
        run: |
          # Add the tags before publishing, as we won't be publishing "latest"
          docker tag ${{env.DOCKER_REPO_AGENT}}:latest ${{env.DOCKER_REPO_AGENT}}:canary
          docker tag ${{env.DOCKER_REPO_CONTROLLER}}:latest ${{env.DOCKER_REPO_CONTROLLER}}:canary

          # Publish the images
          docker push ${{env.DOCKER_REPO_AGENT}}:canary
          docker push ${{env.DOCKER_REPO_CONTROLLER}}:canary
