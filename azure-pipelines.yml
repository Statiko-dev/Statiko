trigger:
  - master

resources:
  - repo: self

variables:
  # Buffalo
  BUFFALO_VERSION: "0.14.5"

  # Go
  GOVERSION: "1.12"
  GOROOT: '/usr/local/go$(GOVERSION)'
  GOPATH: '/home/vsts/go'

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a041da97-3f29-4781-a417-751b98eb7903'
  imageRepository: 'italypaleale/smplatform'
  containerRegistry: 'hub.docker.com'
  dockerfilePath: '$(Build.SourcesDirectory)/container/Dockerfile-copy-binary'
  dockerTag: '$(Build.BuildNumber)'
  testDockerfilePath: '$(Build.SourcesDirectory)/container/Dockerfile-test'
  testImageRepository: 'smplatform-test'

stages:
  - stage: Build
    displayName: Build SMPlatform
    jobs:
      - job: Build
        displayName: Build binaries for Linux (amd64 and arm64)
        pool:
          vmImage: ubuntu-16.04
        steps:
          # Install required packages
          - script: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                autoconf \
                libtool \
                cmake \
                pkg-config \
                git \
                automake \
                autogen \
                ca-certificates \
                clang \
                llvm-dev \
                libtool \
                libxml2-dev \
                uuid-dev \
                libssl-dev \
                swig \
                patch \
                make \
                xz-utils \
                cpio \
                gcc-5-aarch64-linux-gnu \
                g++-5-aarch64-linux-gnu \
                libc6-dev-arm64-cross \
                sqlite
            displayName: "Install required packages"
          # Set up go environment and Buffalo
          - script: |
              # Add to GOBIN to PATH
              echo '##vso[task.prependpath]$(GOBIN)'
              echo '##vso[task.prependpath]$(GOROOT)/bin'
              # Fetch Buffalo's binary
              cd /tmp
              wget https://github.com/gobuffalo/buffalo/releases/download/v$(BUFFALO_VERSION)/buffalo_$(BUFFALO_VERSION)_linux_amd64.tar.gz
              tar -xvzf buffalo_$(BUFFALO_VERSION)_linux_amd64.tar.gz
              sudo mv buffalo /usr/local/bin/buffalo
            displayName: "Set up go environment and Buffalo"
          # Fetch go dependencies
          - script: |
              # App's dependencies
              GO111MODULE=on go get
            displayName: "Fetch go dependencies"
          # Build amd64
          - script: |
              BUILD_ID=$(Build.BuildNumber)
              BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
              COMMIT_HASH=$(git log --pretty=format:'%h' -n 1)

              GO111MODULE=on \
                buffalo build \
                  --environment production \
                  --ldflags "-X smplatform/buildinfo.BuildID=$BUILD_ID -X smplatform/buildinfo.BuildTime=$BUILD_TIME -X smplatform/buildinfo.CommitHash=$COMMIT_HASH" \
                  --output bin/smplatform_linux_amd64
            displayName: "Build amd64"
          # Build arm64
          - script: |
              BUILD_ID=$(Build.BuildNumber)
              BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
              COMMIT_HASH=$(git log --pretty=format:'%h' -n 1)

              CC=aarch64-linux-gnu-gcc-5 \
              CXX=aarch64-linux-gnu-g++-5 \
              GO111MODULE=on \
              GOOS=linux \
              GOARCH=arm64 \
              CGO_ENABLED=1 \
                buffalo build \
                  --environment production \
                  --ldflags "-X smplatform/buildinfo.BuildID=$BUILD_ID -X smplatform/buildinfo.BuildTime=$BUILD_TIME -X smplatform/buildinfo.CommitHash=$COMMIT_HASH" \
                  --output bin/smplatform_linux_arm64
            displayName: "Build arm64"
          # Copy binaries to the artifacts staging directory
          - task: CopyFiles@2
            displayName: Copy binaries to the artifacts staging directory
            inputs:
              sourceFolder: 'bin/'
              contents: '**/*'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
          # Publish binaries as artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish build artifacts'
          # Build Docker image
          - task: Docker@2
            displayName: Build Docker image
            inputs:
              command: build
              buildContext: $(Build.SourcesDirectory)
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                latest
                $(dockerTag)
          # Build Docker test image
          - script: |
              docker build \
                -f $(testDockerfilePath) \
                -t $(testImageRepository) \
                $(Build.SourcesDirectory)/e2e-test
            displayName: Build Docker test image
          # Run end-to-end tests
          - script: |
              docker run \
                --rm \
                -v $(pwd)/e2e-test/container_etc:/etc/smplatform \
                -e "AZURE_STORAGE_SAS_TOKEN=$(AZURE_STORAGE_SAS_TOKEN)" \
                -e "AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)" \
                -e "NODE_URL=https://smplatform.local:3000" \
                -e "NGINX_URL=https://smplatform.local" \
                --add-host "smplatform.local:127.0.0.1" \
                --add-host "site1.local:127.0.0.1" \
                --add-host "site1-alias.local:127.0.0.1" \
                --add-host "mysite.local:127.0.0.1" \
                --add-host "site2.local:127.0.0.1" \
                --add-host "site2-alias.local:127.0.0.1" \
                --add-host "site3.local:127.0.0.1" \
                --add-host "site3-alias.local:127.0.0.1" \
                $(testImageRepository)
            displayName:  Run end-to-end tests
          # Push Docker image to container registry
          - task: Docker@2
            displayName: Push Docker image to container registry
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                latest
                $(dockerTag)
